centos7可用

yum install epel-release -y
yum clean all
yum list

yum install docker-io -y
systemctl start docker //启动docker

systemctl stop docker //停止docker

systemctl restart docker //重启docker

systemctl status docker //查看docker状态

systemctl enable docker //开启启动

安装docker加速器
sudo tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://ckbpcd7f.mirror.aliyuncs.com"]
}
EOF
sudo systemctl daemon-reload
sudo systemctl restart docker

安装docker composer
curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose

chmod +x /usr/local/bin/docker-compose

安装mysql
docker search mysql

docker pull mysql
docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 --name cyt_mysql mysql


docker run -id \
-p 3307:3306 \  将容器的3306端口映射到宿主机的3307端口
--name=cyt_mysql \ 容器名称
-v $PWD/conf:/etc/mysql/conf.d \  将主机当前目录下的conf/my.cnf挂载到容器上去，/etc/mysql/、my.cnf是mysql的配置目录
-v $PWD/logs:/logs \   将主机的日志目录挂载到容器上去
-v $PWD/data:/var/lib/mysql \  将主机的数据目录挂载到容器上去
-e MYSQL_ROOT_PASSWORD=123456 \  设置密码
mysql


安装php
docker search php

docker pull php:7.2-fpm
docker run -d -v /data/www/html:/var/www/html -p 9000:9000 --link cyt_mysql:mysql --name cyt_phpfpm php:7.2-fpm
测试目录映射
docker exec -it  cyt_phpfpm /bin/bash 或者  docker exec -it  cyt_phpfpm sh //进入容器
docker-php-ext-install pdo_mysql  //安装php扩展
pecl install redis && docker-php-ext-enable redis
php -m //查看扩展安装情况

安装nginx
docker pull nginx
 docker run -d -p 80:80 --name cyt_nginx -v /data/www/html:/var/www/html --link cyt_phpfpm:phpfpm --name cyt_nginx nginx

docker exec -it cyt_nginx /bin/bash
cd etc/nginx/conf.d/
vi default.conf


安装tomcat

docker run -id --name=cyt_tomcat -p 8080:8080 -v /data/tomcat/html:/usr/local/tomcat/webapps  tomcat
 如果页面无法访问，查看webapps目录下是否有文件夹ROOT，没有则创建，并创建index.html文件作为首页

安装redis
docker search redis
docker pull redis
docker run -id --name=cyt_redis -p 6379:6379 redis
redis-cli.exe -h 47.98.50.64 -p 6379 //本地测试是否调试完成

容器内安装vi
apt-get update
apt-get install vim
apt-get install rpm   //ps



docker run 参数
	-i 保持容器运行
	-t 为容器重新分配一个伪终端,退出后停止容器
	-d 以守护（后台）模式运行容器，退出后不会关闭容器
	-it创建交互式容器
	-id创建守护式容器
	--name 为创建的容器命名
	-v (宿主机目录):(容器内目录) //建立数据卷，项目映射，内外部文件互通

数据卷
docker run -id --name=c1 -v /data/www:/var/www 镜像名

docker run -id --name=c2 -v /data/www:/var/www 镜像名

docker run -id --name=c2 -v /data/www:/var/www -v /data/www2:/var/www2 镜像名

1、数据持久化，容器删除后本地的文件还在，新建容器关联到目录下数据依然存在。
2、两个容器的数据交互，多个容易可以映射到同一个本地目录，实现数据共享。
3、一个容器可以挂载多个数据卷。
4、客户端和容器之间的数据交互。

数据卷容器
docker run -id --name=c1 -v /data/www:/var/www 镜像名

docker run -id --name=c2 --volumes-from=c1  镜像名
docker run -id --name=c3 --volumes-from=c1  镜像名
1、创建一个容器，挂载一个目录，让其他容器继承该容易(--volume-from)；
2、和多个容器挂载同一个目录的区别是，挂载了容器，如果本地目录变更只需要变更数据卷容器的挂载目录就可以，其他容器不需要做修改。

进入容器
docker attach 容器ID
docker exec -it 容器ID /bin/bash
docker exec -it 容器ID sh


镜像制作
容器转为镜像docker commit 容器ID 镜像名称：版本号
压缩文件   docker save -o 压缩文件名称  镜像名称：版本号
解压镜像文件 docker load -i 压缩文件名称


制作dockerfile
FROM 镜像版本
MAINTAINER  作者 <email>
RUN  yum install -y vim  安装命令
WORKDIR /usr   工作地址
cmd /bin/bash	进入容器

dockerfile镜像的使用
docker bulid -f  /swoftware/dockerfile名称   -t  镜像名称：版本号 . 
. 代表进入容器工作目录

docker-compose布置项目
在项目目录下配置docker-compose.yml文件，代码示例如下
version: '3'

services:
  
    nginx:
    
        image: nginx
    
        ports:
      - "8000:80"

        depends_on:
      - php

        volumes:
      - "$PWD/nginx/default.conf:/etc/nginx/conf.d/default.conf"
      - "$PWD/html:/usr/share/nginx/html"

        networks:
      - app_net

        container_name: "docker-www-nginx"
  
    php:

        build: ./php
    
        ports: ["9000"]

        links:
      - mysql
    
    volumes:
      - "$PWD/html:/var/www/html"
    
    networks:
      - app_net
    
    container_name: "docker-www-php"
  
    mysql:

        image: mysql:5.7

        ports: ["3306"]

        environment:
      - MYSQL_ROOT_PASSWORD=root
    
    volumes:
      - "$PWD/mysql:/var/lib/mysql"
    
    networks:
      - app_net

        container_name: "docker-www-mysql"

networks:

      app_net:

配置成功以后
docker-compose up启动


上传到私有仓库
docker pull registry
docker run -id --name myRegistry -p 5000:5000 registry

vim /etc/docker/daemon.json
添加  "insecure-registries":["47.98.50.64:5000"]
重启docker  systemctl restart docker
docker start myRegistry

http://47.98.50.64:5000/v2/_catalog //测试私有仓库是否安装成功

给镜像做私有化标记 docker tag 6ff  47.98.50.64:5000/php:7.2

上传镜像到私有库   docker push 47.98.50.64:5000/php:7.2


上传到阿里云镜像仓库
sudo docker login --username=tony状 registry.cn-hangzhou.aliyuncs.com
sudo docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/xiongmz/php:[镜像版本号]
sudo docker push registry.cn-hangzhou.aliyuncs.com/xiongmz/php:[镜像版本号]






